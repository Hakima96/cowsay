extern crate clap;

use std::str;
use std::env;
use clap::{App, Arg};

mod assets;


fn format_animal(s: &str) -> &str {
    s.replace("$eyes", "oo")
     .replace("$thoughts", "")
     .replace("$tongue", "")
}

fn main() {

    let matches = App::new("rust-cowsay")
        .version("v0.1.0-pre-alpha")
        .author("Matt Smith. <matthew.smith491@gmail.com>")
        .arg(Arg::with_name("f")
            .short("f")
            .value_name("COW")
            .help("Which cow should say"))
        .get_matches();

    let cow = matches.value_of("f").unwrap_or("default");

    let think;

    match env::args().collect::<Vec<_>>()[0].ends_with("cowthink") {
        true => think = true,
        false => think = false,
    }

    println!("{}", think);

    let fmt = &format!("src/cows/{}.cow", &cow);
    let mut cowbody = str::from_utf8(assets::get(&fmt).unwrap()).unwrap();
    cowbody = format_animal(cowbody);
    println!("{}", cowbody);

}
